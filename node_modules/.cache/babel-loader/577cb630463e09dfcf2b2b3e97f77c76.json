{"remainingRequest":"/Users/jessehen/PhpstormProjects/lifecoach-frontend/node_modules/babel-loader/lib/index.js!/Users/jessehen/PhpstormProjects/lifecoach-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/jessehen/PhpstormProjects/lifecoach-frontend/src/plugins/logger.js","dependencies":[{"path":"/Users/jessehen/PhpstormProjects/lifecoach-frontend/src/plugins/logger.js","mtime":1577651494365},{"path":"/Users/jessehen/PhpstormProjects/lifecoach-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jessehen/PhpstormProjects/lifecoach-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jessehen/PhpstormProjects/lifecoach-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n// Credits: borrowed code from fcomb/redux-logger\nimport { deepCopy } from \"../util\";\nexport default function createLogger() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$collapsed = _ref.collapsed,\n      collapsed = _ref$collapsed === void 0 ? true : _ref$collapsed,\n      _ref$filter = _ref.filter,\n      filter = _ref$filter === void 0 ? function (mutation, stateBefore, stateAfter) {\n    return true;\n  } : _ref$filter,\n      _ref$transformer = _ref.transformer,\n      transformer = _ref$transformer === void 0 ? function (state) {\n    return state;\n  } : _ref$transformer,\n      _ref$mutationTransfor = _ref.mutationTransformer,\n      mutationTransformer = _ref$mutationTransfor === void 0 ? function (mut) {\n    return mut;\n  } : _ref$mutationTransfor,\n      _ref$logger = _ref.logger,\n      logger = _ref$logger === void 0 ? console : _ref$logger;\n\n  return function (store) {\n    var prevState = deepCopy(store.state);\n    store.subscribe(function (mutation, state) {\n      if (typeof logger === 'undefined') {\n        return;\n      }\n\n      var nextState = deepCopy(state);\n\n      if (filter(mutation, prevState, nextState)) {\n        var time = new Date();\n        var formattedTime = \" @ \".concat(pad(time.getHours(), 2), \":\").concat(pad(time.getMinutes(), 2), \":\").concat(pad(time.getSeconds(), 2), \".\").concat(pad(time.getMilliseconds(), 3));\n        var formattedMutation = mutationTransformer(mutation);\n        var message = \"mutation \".concat(mutation.type).concat(formattedTime);\n        var startMessage = collapsed ? logger.groupCollapsed : logger.group; // render\n\n        try {\n          startMessage.call(logger, message);\n        } catch (e) {\n          console.log(message);\n        }\n\n        logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));\n        logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);\n        logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));\n\n        try {\n          logger.groupEnd();\n        } catch (e) {\n          logger.log('—— log end ——');\n        }\n      }\n\n      prevState = nextState;\n    });\n  };\n}\n\nfunction repeat(str, times) {\n  return new Array(times + 1).join(str);\n}\n\nfunction pad(num, maxLength) {\n  return repeat('0', maxLength - num.toString().length) + num;\n}",{"version":3,"sources":["/Users/jessehen/PhpstormProjects/lifecoach-frontend/src/plugins/logger.js"],"names":["deepCopy","createLogger","collapsed","filter","mutation","stateBefore","stateAfter","transformer","state","mutationTransformer","mut","logger","console","store","prevState","subscribe","nextState","time","Date","formattedTime","pad","getHours","getMinutes","getSeconds","getMilliseconds","formattedMutation","message","type","startMessage","groupCollapsed","group","call","e","log","groupEnd","repeat","str","times","Array","join","num","maxLength","toString","length"],"mappings":"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","sourcesContent":["// Credits: borrowed code from fcomb/redux-logger\n\nimport {deepCopy} from '../util'\n\nexport default function createLogger({\n                                         collapsed = true,\n                                         filter = (mutation, stateBefore, stateAfter) => true,\n                                         transformer = state => state,\n                                         mutationTransformer = mut => mut,\n                                         logger = console\n                                     } = {}) {\n    return store => {\n        let prevState = deepCopy(store.state)\n\n        store.subscribe((mutation, state) => {\n            if (typeof logger === 'undefined') {\n                return\n            }\n            const nextState = deepCopy(state)\n\n            if (filter(mutation, prevState, nextState)) {\n                const time = new Date()\n                const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`\n                const formattedMutation = mutationTransformer(mutation)\n                const message = `mutation ${mutation.type}${formattedTime}`\n                const startMessage = collapsed\n                    ? logger.groupCollapsed\n                    : logger.group\n\n                // render\n                try {\n                    startMessage.call(logger, message)\n                } catch (e) {\n                    console.log(message)\n                }\n\n                logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState))\n                logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation)\n                logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState))\n\n                try {\n                    logger.groupEnd()\n                } catch (e) {\n                    logger.log('—— log end ——')\n                }\n            }\n\n            prevState = nextState\n        })\n    }\n}\n\nfunction repeat(str, times) {\n    return (new Array(times + 1)).join(str)\n}\n\nfunction pad(num, maxLength) {\n    return repeat('0', maxLength - num.toString().length) + num\n}\n"]}]}